/*
A KBase module: kb_clustering
*/

module kb_clustering {

    /* A boolean - 0 for false, 1 for true.
      @range (0, 1)
    */
    typedef int boolean;

    /* An X/Y/Z style reference*/
    typedef string obj_ref;

    /* Input of the run_hierarchical_cluster function
      matrix_ref: Matrix object reference
      workspace_id: the id of the workspace
      cluster_set_name: KBaseExperiments.ClusterSet object name
      dimension: run cluster algorithm on dimension, col or row
      dist_cutoff_rate: the threshold to apply when forming flat clusters

      Optional arguments:
      dist_metric: The distance metric to use. Default set to 'euclidean'.
                   The distance function can be
                   ["braycurtis", "canberra", "chebyshev", "cityblock", "correlation", "cosine",
                    "dice", "euclidean", "hamming", "jaccard", "kulsinski", "matching",
                    "rogerstanimoto", "russellrao", "sokalmichener", "sokalsneath", "sqeuclidean",
                    "yule"]
                   Details refer to:
                   https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html

      linkage_method: The linkage algorithm to use. Default set to 'ward'.
                      The method can be
                      ["single", "complete", "average", "weighted", "centroid", "median", "ward"]
                      Details refer to:
                      https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.linkage.html

      fcluster_criterion: The criterion to use in forming flat clusters. Default set to 'distance'.
                          The criterion can be
                          ["inconsistent", "distance", "maxclust"]
                          Details refer to:
                          https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.fcluster.html
    */
    typedef structure {
      obj_ref matrix_ref;
      int workspace_id;
      string cluster_set_name;
      string dimension;
      float dist_cutoff_rate;

      string dist_metric;
      string linkage_method;
      string fcluster_criterion;
    } HierClusterParams;

    /* Ouput of the run_hierarchical_cluster function
      cluster_set_refs: KBaseExperiments.ClusterSet object references
      report_name: report name generated by KBaseReport
      report_ref: report reference generated by KBaseReport
    */
    typedef structure {
      obj_ref cluster_set_ref;
      string report_name;
      string report_ref;
    } HierClusterOutput;

    /* run_hierarchical_cluster: generates hierarchical clusters for Matrix data object*/
    funcdef run_hierarchical_cluster(HierClusterParams params) returns(HierClusterOutput returnVal) authentication required;

    /* Input of the run_kmeans_cluster function
      matrix_ref: Matrix object reference
      workspace_name: the name of the workspace
      cluster_set_name: KBaseExperiments.ClusterSet object name
      k_num: number of clusters to form

      Optional arguments:
      dist_metric: The distance metric to use. Default set to 'euclidean'.
                   The distance function can be
                   ["braycurtis", "canberra", "chebyshev", "cityblock", "correlation", "cosine",
                    "dice", "euclidean", "hamming", "jaccard", "kulsinski", "matching",
                    "rogerstanimoto", "russellrao", "sokalmichener", "sokalsneath", "sqeuclidean",
                    "yule"]
                   Details refer to:
                   https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html
    */
    typedef structure {
      obj_ref matrix_ref;
      string workspace_name;
      string cluster_set_name;
      int k_num;

      string dist_metric;
    } KmeansClusterParams;

    /* Ouput of the run_kmeans_cluster function
      cluster_set_refs: KBaseExperiments.ClusterSet object references
      report_name: report name generated by KBaseReport
      report_ref: report reference generated by KBaseReport
    */
    typedef structure {
      list<obj_ref> cluster_set_refs;
      string report_name;
      string report_ref;
    } KmeansClusterOutput;

    /* run_kmeans_cluster: generates Kmeans clusters for Matrix data object*/
    funcdef run_kmeans_cluster(KmeansClusterParams params) returns(KmeansClusterOutput returnVal) authentication required;

};
